{{/* <!--
	
	e/scheme.scss

	Used in .scss files to add a scheme to a css class.
	- The list of elements to insert in the class is retrieved from /data/schemes.yaml
	- Then each element is inserted into the css class
	
	Arguments:
	- element name as string
	
--> */}}

{{/* <!-- initialize variables --> */}}
{{- $scheme := slice -}}

{{/* <!-- get parameters, either the element name if called directly or --> */}}
{{/* <!-- or a slice with element, values if called recursively --> */}}
{{- $element := . -}}

{{- $type := partial "f/getdatatype" $element -}}
{{/* <!-- if the argument is a string... --> */}}
{{- if eq "string" $type  -}}
	{{/* <!-- ...then try to get the scheme matching the element name from the file "schemes.yaml" --> */}}
	{{- $scheme = index site.Data.schemes $element -}}
	{{- $element = "" -}}
{{- else -}}
	{{/* <!-- ...else we assume e/scheme.scss has been called with a slice --> */}}
	{{- $scheme = index $element 1 -}}
	{{- $schemetype := partial "f/getdatatype" $scheme -}}
	{{- if eq "string" $schemetype  -}}
		{{/* <!-- ...then try to get the scheme matching the element name from the file "schemes.yaml" --> */}}
		{{- $scheme = index site.Data.schemes $scheme -}}
	{{- end -}}
	{{- $element = index $element 0 -}}
	{{- if eq "." (substr $element 0 1) -}}
		{{- $element = substr $element 1 -}}
	{{- end -}}
	{{- if ne "" $element -}}
		{{- $element = printf "%s-" $element -}}
	{{- end -}}
{{- end -}}

{{- if $scheme -}}
	{{/* <!-- generate unused variable with the scheme name for debugging --> */}}
	{{- if eq "string" $type -}}
		{{ printf "--scheme:%s;" . }}
	{{- else -}}
		{{- if ne "" (index . 0) -}}
		{{ printf "--scheme:%s;" (index . 0) }}
		{{- end -}}
	{{- end -}}
{{- end -}}

{{/* <!-- iterate over each value for the scheme to generate the css code --> */}}
{{- range $key, $val := $scheme -}}

	{{- $valtype := partial "f/getdatatype" $val -}}
	{{- $keyname := printf "%s" $key -}}

	{{/* <!-- if $val is a string... --> */}}
	{{- if eq "string" $valtype -}}
		{{/* <!-- ...then the value can be used to generate the css variable --> */}}
		
		{{/* <!-- if the $key is named "scheme"... --> */}}
		{{- if eq "scheme" $keyname -}}
			{{/* <!-- ...then call e/colorscheme.scss to generate predefined color scheme --> */}}
			{{ partial "e/colorscheme.scss" $val }}
		{{- else -}}
			{{/* <!-- ...else generate css variable, e.g. "--font-size: 1em" --> */}}
			{{/* <!-- where $key is "font-size" and $val is "1em" --> */}}
			{{- printf "--%s%s:%s;" $element $key $val -}}
		{{- end -}}
		
	{{- else -}}
		
		{{- if eq "sm" $keyname }}
			
			{{/* <!-- generate @media{ css for small screens --> */}}
			{{- printf "@media (max-width:$gl-sm-screen){" -}}
			
			{{/* <!-- call e/scheme recursively */}}
			{{ partial "e/scheme.scss" (slice "" $val) }}
			
			{{/* <!-- close "tag" css --> */}}
			{{- printf "}" -}}
			
		{{- else if eq "lg" $keyname }}
			
			{{/* <!-- generate @media{ css for large screens --> */}}
			{{- printf "@media(min-width:$gl-lg-screen){" -}}
			
			{{/* <!-- call e/scheme recursively */}}
			{{ partial "e/scheme.scss" (slice $key $val) }}
			
			{{/* <!-- close "tag" css --> */}}
			{{- printf "}" -}}
			
		{{- else -}}
			
			{{/* <!-- generate tag{ css --> e.g. "h1{" where $key is "h1" */}}
			{{- printf "%s{" $key -}}
			
			{{/* <!-- call e/scheme recursively */}}
			{{ partial "e/scheme.scss" (slice $key $val) }}
			
			{{/* <!-- close "tag" css --> */}}
			{{- printf "}" -}}
			
		{{- end -}}
		
	{{- end -}}

{{- end -}}
