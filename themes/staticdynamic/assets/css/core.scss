{{ partial "e/sass.scss" . }}

	@mixin text($tag) {
		
		/*
			applies the same set of standard text properties to a tag:
			- font-family
			- font-weight
			- font-size
			- line-height
			- text-align
			- text-transform
		*/
		
		@if "b" == $tag {
			font-family: var(--font-family-b);
			font-weight: var(--font-weight-b);
			font-size: calc(var(--font-size) * var(--font-ratio));
			line-height: var(--line-height-b);
			text-align: var(--text-align-b);
			text-transform: var(--text-transform-b);
		}
		@else if "blockquote" == $tag {
			font-family: var(--font-family-blockquote);
			font-weight: var(--font-weight-blockquote);
			font-size: calc(var(--font-size-blockquote) * var(--font-ratio));
			line-height: var(--line-height-blockquote);
			text-align: var(--text-align-blockquote);
			text-transform: var(--text-transform-blockquote);
		}
		@else if "button-primary" == $tag {
			font-family: var(--font-family-button);
			font-weight: var(--font-weight-button);
			font-size: calc(var(--font-size-button-primary) * var(--font-ratio));
			line-height: var(--line-height-button-primary);
			text-align: var(--text-align-button-primary);
			text-transform: var(--text-transform-button-primary);
		}
		@else if "button-secondary" == $tag {
			font-family: var(--font-family-button);
			font-weight: var(--font-weight-button);
			font-size: calc(var(--font-size-button-secondary) * var(--font-ratio));
			line-height: var(--line-height-button-secondary);
			text-align: var(--text-align-button-secondary);
			text-transform: var(--text-transform-button-secondary);
		}
		@else if "h1" == $tag {
			font-family: var(--font-family-h);
			font-weight: var(--font-weight-h);
			font-size: calc(var(--font-size-h1) * var(--font-ratio));
			line-height: var(--line-height-h1);
			text-align: var(--text-align-h1);
			text-transform: var(--text-transform-h1);
		}
		@else if "h2" == $tag {
			font-family: var(--font-family-h);
			font-weight: var(--font-weight-h);
			font-size: calc(var(--font-size-h2) * var(--font-ratio));
			line-height: var(--line-height-h2);
			text-align: var(--text-align-h2);
			text-transform: var(--text-transform-h2);
		}
		@else if "h3" == $tag {
			font-family: var(--font-family-h);
			font-weight: var(--font-weight-h);
			font-size: calc(var(--font-size-h3) * var(--font-ratio));
			line-height: var(--line-height-h3);
			text-align: var(--text-align-h3);
			text-transform: var(--text-transform-h3);
		}
		@else if "h4" == $tag {
			font-family: var(--font-family-h);
			font-weight: var(--font-weight-h);
			font-size: calc(var(--font-size-h4) * var(--font-ratio));
			line-height: var(--line-height-h4);
			text-align: var(--text-align-h4);
			text-transform: var(--text-transform-h4);
		}
		@else if "h5" == $tag {
			font-family: var(--font-family-h);
			font-weight: var(--font-weight-h);
			font-size: calc(var(--font-size-h5) * var(--font-ratio));
			line-height: var(--line-height-h5);
			text-align: var(--text-align-h5);
			text-transform: var(--text-transform-h5);
		}
		@else if "li" == $tag {
			font-family: var(--font-family);
			font-weight: var(--font-weight);
			font-size: calc(var(--font-size) * var(--font-ratio));
			line-height: var(--line-height-li);
			text-align: var(--text-align-li);
			text-transform: var(--text-transfor-lim);
		}
		@else if "p" == $tag {
			font-family: var(--font-family);
			font-weight: var(--font-weight);
			font-size: calc(var(--font-size) * var(--font-ratio));
			line-height: var(--line-height-p);
			text-align: var(--text-align-p);
			text-transform: var(--text-transform-p);
		}
		@else {
			font-family: var(--font-family);
			font-weight: var(--font-weight);
			font-size: calc(var(--font-size) * var(--font-ratio));
			line-height: var(--line-height);
			text-align: var(--text-align);
			text-transform: var(--text-transform);
		}
	}
	
	@mixin margins($tag) {
		
		/*
			applies top and bottom margins to a tag:
			- margin-top
			- margin-bottom
		 */
		
		@if "blockquote" == $tag {
			margin-top: var(--margin-top-blockquote);
			margin-bottom: var(--margin-bottom-blockquote);
		}
		@else if "button-primary" == $tag {
			margin-top: var(--margin-top-button-primary);
			margin-bottom: var(--margin-bottom-button-primary);
		}
		@else if "button-secondary" == $tag {
			margin-top: var(--margin-top-button-secondary);
			margin-bottom: var(--margin-bottom-button-secondary);
		}
		@else if "h1" == $tag {
			margin-top: var(--margin-top-h1);
			margin-bottom: var(--margin-bottom-h1);
		}
		@else if "h2" == $tag {
			margin-top: var(--margin-top-h2);
			margin-bottom: var(--margin-bottom-h2);
		}
		@else if "h3" == $tag {
			margin-top: var(--margin-top-h3);
			margin-bottom: var(--margin-bottom-h3);
		}
		@else if "h4" == $tag {
			margin-top: var(--margin-top-h4);
			margin-bottom: var(--margin-bottom-h4);
		}
		@else if "h5" == $tag {
			margin-top: var(--margin-top-h5);
			margin-bottom: var(--margin-bottom-h5);
		}
		@else if "img" == $tag {
			margin-top: var(--margin-top-img);
			margin-bottom: var(--margin-bottom-img);
		}
		@else if "li" == $tag {
			margin-top: var(--margin-top-li);
			margin-bottom: var(--margin-bottom-li);
		}
		@else if "p" == $tag {
			margin-top: var(--margin-top-p);
			margin-bottom: var(--margin-bottom-p);
		}
		@else if "ul" == $tag {
			margin-top: var(--margin-top-ul);
			margin-bottom: var(--margin-bottom-ul);
		}
	}
	
	@mixin colors($tag) {

		/*
			applies colors to a tag:
			- background-color
			- (text) color
		*/
		
		@if "a" == $tag {
			background-color: var(--color-back-a);
			color: var(--color-text-a);
		}
		@else if "a:hover" == $tag {
			background-color: var(--color-back-a-hover);
			color: var(--color-text-a-hover);
		}
		@else if "b" == $tag {
			background-color: var(--color-back-b);
			color: var(--color-text-b);
		}
		@else if "blockquote" == $tag {
			background-color: var(--color-back-blockquote);
			color: var(--color-text-blockquote);
		}
		@else if "button-primary" == $tag {
			background-color: var(--color-back-button-primary);
			color: var(--color-text-button-primary);
		}
		@else if "button-primary-hover" == $tag {
			background-color: var(--color-back-button-primary-hover);
			color: var(--color-text-button-primary-hover);
		}
		@else if "button-secondary" == $tag {
			background-color: var(--color-back-button-secondary);
			color: var(--color-text-button-secondary);
		}
		@else if "button-secondary-hover" == $tag {
			background-color: var(--color-back-button-secondary-hover);
			color: var(--color-text-button-secondary-hover);
		}
		@else if "h1" == $tag {
			background-color: var(--color-back-h1);
			color: var(--color-text-h1);
		}
		@else if "h2" == $tag {
			background-color: var(--color-back-h2);
			color: var(--color-text-h2);
		}
		@else if "h3" == $tag {
			background-color: var(--color-back-h3);
			color: var(--color-text-h3);
		}
		@else if "h4" == $tag {
			background-color: var(--color-back-h4);
			color: var(--color-text-h4);
		}
		@else if "h5" == $tag {
			background-color: var(--color-back-h5);
			color: var(--color-text-h5);
		}
		@else if "li" == $tag {
			background-color: var(--color-back-li);
			color: var(--color-text-li);
		}
		@else if "p" == $tag {
			background-color: var(--color-back-p);
			color: var(--color-text-p);
		}
		@else if "time" == $tag {
			background-color: var(--color-back-time);
			color: var(--color-text-time);
		}
		@else {
			background-color: var(--color-back);
			color: var(--color-text);
		}
	}



	* {
		/* use box-sizing as the default sizing model */
		box-sizing: border-box;
		scroll-margin-top: calc(var(--menubar-height) + 48px);
	}

	a {
		@include colors("a");
		@include text("a");
		border-bottom: 1px dotted var(--color-border-a);
		text-decoration: none;
		transition: all .35s;
	}
	a:hover,
	a:focus {
		@include colors("a:hover");
		transition: all .35s;
	}
	
	aside {
		@include colors("aside");
	}

	b {
		@include colors("b");
		@include text("b");
	}
	
	blockquote {
		@include colors("blockquote");
		@include margins("blockquote");
		@include text("blockquote");
		@include firstlastchildnomargin();
		border-left: 4px solid var(--color-border-blockquote);
		margin-left: 0;
		margin-right: 0;
		padding: 1em;
	}
	
	body {
		@include colors("body");
		@include text("body");
		margin: 0 auto;
		padding-top:  var(--menubar-height);
		max-width: var(--page-max-width);
	}

	div {
		@include colors("div");
	}	

	footer {
		@include colors("footer");
	}
	
	h1 {
		@include colors("h1");
		@include margins("h1");
		@include text("h1");
	}
	
	h2 {
		@include colors("h2");
		@include margins("h2");
		@include text("h2");
	}

	h3 {
		@include colors("h3");
		@include margins("h3");
		@include text("h3");
	}

	h4 {
		@include colors("h4");
		@include margins("h4");
		@include text("h4");
	}

	h5 {		
		@include colors("h5");
		@include margins("h5");
		@include text("h5");
	}
	
	header {
		@include colors("header");
	}

	img {
		@include margins("img");
		@include img-resp;
	}

	input {
		@include text("input");
	}
	
	li {
		@include colors("li");
		@include margins("li");
		@include text("li");
	}
	
	main {
		@include colors("main");
	}
	
	nav {
		@include colors("nav");
	}
	
	p {
		@include colors("p");
		@include margins("p");
		@include text("p");
	}
	
	section  {
		@include colors("section");
	}
	
	strong {
		@include colors("b");
		@include text("b"); /* "b" because used as synonym of <b> */
	}
	
	textarea {
		@include text("textarea");
	}

	time {
		@include colors("time");
	}
	
	ul {
		@include margins("ul");
		list-style-type: var(--list-style-type-ul);
		padding-left: var(--padding-left-ul);
	}

	.cl-core--button-primary {
		@include colors("button-primary");
		@include margins("button-primary");
		@include text("button-primary");
		border: none;
		border-radius: 0.5em;
		display: inline-block;
		list-style: none; /* remove bullet when used on li */
		margin-left: auto;
		margin-right: auto;
		padding: 1em 2em;
		
		&:hover {
			@include colors("button-primary-hover");
			transition: background-color .5s;
			cursor: pointer;
		}
	}
	
	.cl-core--button-secondary {
		@include colors("button-secondary");
		@include margins("button-secondary");
		@include text("button-secondary");
		border: none;
		border-radius: 0.5em;
		display: inline-block;
		list-style: none; /* remove bullet when used on li */
		padding: 0;
		
		&:hover {
			@include colors("button-secondary-hover");
			transition: background-color .5s;
			cursor: pointer;
		}
	}

	/* content helper classes */
	.st-border {
		border: 1px solid var(--color-border);
	}
	
	.st-center {
		text-align: center;
	}
	
	.st-icon {
		width: 3em;
	}

	/*
		color scheme helper classes
		create bg-color-scheme classes from /data/colorschemes.yaml
		for example, a helper class ".bg-black" will be created for the color scheme named "black"
	*/
	{{ range $key, $value := site.Data.colorschemes }}
		{{ if not (partial "f/isstring.go" $value) }}
			{{ $class := printf ".bg-%s" $key }}
			{{ $class }} {
				{{ partial "e/colorscheme.scss" $key }}
			}
		{{ end }}
	{{ end }}
