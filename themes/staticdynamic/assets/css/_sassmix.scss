/*	--------
	screen size breakpoints
	unit: px
	declared as sass variables because css variables don't work in media queries
	-------- */
	$gl-sm-screen: 720px !default;
	$gl-lg-screen: 1440px !default;
	$gl-menu-short: 900px !default;



/*	--------
	mixins
	-------- */

	@mixin a-underline-none {
		border-bottom: none;
	}

	@mixin firstlastchildnomargin {
		/* remove top margin from first element and bottom margin from last element */
		> :first-child {
			margin-top: 0;
		}
		> :last-child {
			margin-bottom: 0;
		}
	}

	@mixin flex-column($gap: "none", $wrap: "nowrap", $align-column-h: flex-start, $align-h: flex-start, $align-v: flex-start) {
		/* creates a flexbox column */
		display: flex;
		flex-direction: column;
		align-content: $align-h;
		align-items: $align-column-h;
		justify-content: $align-v;
		flex-wrap: var(--flex-wrap);
		column-gap: var(--column-gap);
		row-gap: var(--row-gap);
		
		@if "gap" == $gap {
			--column-gap: var(--column-gap-default);
			--row-gap: var(--row-gap-default);
		}
		@else if "big" == $gap {
			--column-gap: var(--column-gap-big);
			--row-gap: var(--row-gap-big);
		}
		@else if "none" == $gap {
			--column-gap: 0px;
			--row-gap: 0px;
		}
		@else {
			--column-gap: calc( #{$gap} );
			--row-gap: calc( #{$gap} );
		}
		
		@if "nowrap" == $wrap {
			--flex-wrap: nowrap;
		}
		@else {
			--flex-wrap: wrap;
		}
	}

	@mixin flex-column-sm($flex-direction: column) {
		/* turns flex-row into a flex-column on small screens */
		@media (max-width: $gl-sm-screen) {
			flex-direction: $flex-direction;
		}
	}
	
	@mixin flex-row($gap: "none", $wrap: "nowrap", $align-row-v: flex-start, $align-v: flex-start, $align-h: flex-start) {
		/* creates a flexbox row */
		display: flex;
		flex-direction: row;
		align-content: $align-v;
		align-items: $align-row-v;
		justify-content: $align-h;
		flex-wrap: var(--flex-wrap);
		column-gap: var(--column-gap);
		row-gap: var(--row-gap);
		
		@if "gap" == $gap {
			--column-gap: var(--column-gap-default);
			--row-gap: var(--row-gap-default);
		}
		@else if "big" == $gap {
			--column-gap: var(--column-gap-big);
			--row-gap: var(--row-gap-big);
		}
		@else if "none" == $gap {
			--column-gap: 0px;
			--row-gap: 0px;
		}
		@else {
			--column-gap: calc( #{$gap} );
			--row-gap: calc( #{$gap} );
		}
		
		@if "nowrap" == $wrap {
			--flex-wrap: nowrap;
		}
		@else {
			--flex-wrap: wrap;
		}
	}

	@mixin height-screen-full {
		/* set height to screen height (actually viewport height) */
		height: calc(100vh - var(--menubar-height));
	}
	
	@mixin height-full {
		/* set height to full height of parent container */
		height: 100%;
	}
	
	@mixin height-half {
		/* set height to half height of parent container */
		height: 50%;
	}
	
	@mixin height-half-sm-screen {
		/* set height to half height of parent container on small screens */
		@media (max-width: $gl-sm-screen) {
			height: 50%;
		}
	}
	
	@mixin height-hero {
		/* set height to fixed hero height */
		height: var(--hero-height);
	}
	
	@mixin height-module {
		/* set height to fixed module height */
		height: calc( var(--module-height) * 1vw ); /* defines the fixed height of the module */
		max-height: calc( var(--page-max-width) / 80 * var(--module-height) );
	}
	
	@mixin height-navbar {
		/* set height to navbar height */
		height: var(--menubar-height);
	}
	
	@mixin img-back($z-index: 0) {
		/*
			puts image in the back as a background image, full size of parent
			(also see text-front to put text in front of image)
		*/
		position: absolute;
		height: inherit; /* ! parent container must have height in absolute unit or 100%, but not 0-99% */
		width: inherit; /* ! parent container must have width in absolute unit or 100%, but not not 0-99% */
		max-width: var(--page-max-width);
		object-fit: cover;
		@if 0 != $z-index {
			z-index: $z-index;
		}
	}
	
	@mixin img-circle($size) {
		/* round image */
		width: $size !important;
		height: $size !important;
		border-radius: 50%;
	}
	
	@mixin img-contain {
		/* image full width of parent container, height based on image ratio */
		display: block;
		height: 100%;
		width: 100%;
		object-fit: contain;
	}

	@mixin img-cover {
		/* image full size of parent container, cropped to fill parent container */
		display: block;
		height: 100%;
		width: 100%;
		object-fit: cover;
	}

	@mixin img-responsive {
		display: block; /* prevent line height from being added to div height */
		max-width: 100%;
		height: auto;
	}
	
	@mixin img-sameline {
		/* image on same line as text, useful to add icons in text */
		display: inline-block;
	}
	
	@mixin margins($vertical: "medium", $horizontal:Â "normal") {
		/* margins for content
			marginv: "tall", "medium", "short", "none"
			marginh: "wide", "normal", "gap", "none"
		*/
		
		@if "tall" == $vertical {
			margin-top: 5em !important;
			margin-bottom: 5em !important;
		}
		@else if "medium" == $vertical {
			margin-top: 3em !important;
			margin-bottom: 3em !important;		
		}
		@else if "short" == $vertical {
			margin-top: 1em !important;
			margin-bottom: 1em !important;
		}
		@else if "none" == $vertical {
			margin-top: 0 !important;
			margin-bottom: 0 !important;
		}
		@else {
			margin-top : $vertical !important;
			margin-bottom: $vertical !important;
		}
		
		@if "normal" == $horizontal {
			margin-left: auto; /* use auto to center div on page */
			margin-right: auto; /* use auto to center div on page */
			width: 80vw;
			max-width: var(--content-max-width); /* prevents text area from getting unpleasantly wide */
			@media (max-width: $gl-sm-screen) {
				--column-gap: var(--column-gap-default); 
				margin-left: var(--column-gap);
				margin-right: var(--column-gap); 
				width: calc(100% - var(--column-gap) * 2);
				max-width: calc(100% - var(--column-gap) * 2);
			}
		}
		@else if "wide" == $horizontal {
			/* use for narrow content such as forms */
			margin-left: auto; /* use auto to center div on page */
			margin-right: auto; /* use auto to center div on page */
			width: 50vw;
			max-width: var(--content-max-width-narrow); /* prevents text area from getting unpleasantly wide */
			@media (max-width: $gl-sm-screen) {
				--column-gap: var(--column-gap-default); 
				margin-left: var(--column-gap);
				margin-right: var(--column-gap);
				width: calc(100% - var(--column-gap) * 2 );
				max-width: calc(100% - var(--column-gap) * 2 );
			}
		}
		@else if "gap" == $horizontal {
				--column-gap: var(--column-gap-default); 
				margin-left: var(--column-gap);
				margin-right: var(--column-gap); 
				width: calc(100% - var(--column-gap) * 2);
		}
		@else if "none" == $horizontal {
				margin-left: 0;
				margin-right: 0;
				width: calc( 100% );
		}
		@else {
				margin-left: $horizontal;
				margin-right: $horizontal; 
				width: calc(100% - #{$horizontal} * 2);			
		}
	}

	@mixin scroll-h {
		/*
			Creates container with horizontal overflow + horizontal scroll bar.
			Useful for carousel.
		*/
		
		overflow-x: scroll;
		
		&::-webkit-scrollbar {
			height: 0.4em;
		}
		&::-webkit-scrollbar-track {
			/* Track */
			border-radius: 10px;
			background: #ddd;
			opacity: 0.5;
		}
		&::-webkit-scrollbar-thumb {
			/* Handle */
			background: #222; 
			border-radius: 10px;
			opacity: 0.4;
		}	
		
	}
	
	@mixin text-front($z-index: 10) {
		/* 
			puts text front, often to layer it above an image
			(also see img-back to put image in the background)
		*/
		position: relative;	/* enables z-index */
		z-index: $z-index; /* if text overflows, it will go over picture below */
	}
	
	@mixin text-padding($padding: 2em) {
		padding: $padding;
	}

	/* use to remove all styles from ul, useful to use ul for grids, carousels, etc. */
	@mixin ul-list-style-none {
		--list-style-type: none;
		--padding-left: 0;
		--list-indent: 0;
		--margin-top: 0;
		--margin-bottom: 0;
	}

	@mixin ul-container {
		--list-style-type: none;
		--padding-left: 0;
		--list-indent: 0;
	}

	@mixin variable-scheme() {
		background-color: var(--color-back);
		color: var(--color-text);
		
		font-family: var(--font-family);
		font-weight: var(--font-weight);
		font-size: calc(var(--font-ratio) * var(--font-base-size));
		line-height: var(--line-height);
		text-align: var(--text-align);
		text-transform: var(--text-transform);
		
		padding: var(--padding);
		padding-top: var(--padding-top);
		padding-bottom: var(--padding-bottom);
		padding-left: var(--padding-left);
		padding-right: var(--padding-right);
		
		margin: var(--margin);
		margin-top: var(--margin-top);
		margin-bottom: var(--margin-bottom);
		margin-left: var(--margin-left);
		margin-right: var(--margin-right);
	}
	
	@mixin width-column($col-nb, $col-span: 1) {
		/* determines width of column based on number of columns $nbcols and gap */
		$gap-nb: $col-nb - 1;
		$gap-span: $col-span - 1;
		flex-basis: calc( ( 100% - #{$gap-nb} * var(--column-gap) ) / #{$col-nb} * #{$col-span} + var(--column-gap) * #{$gap-span} - 0.001px );
		width: calc( ( 100% - #{$gap-nb} * var(--column-gap) ) / #{$col-nb} * #{$col-span} + var(--column-gap) * #{$gap-span} - 0.001px );
	}
	
	@mixin width-column-sm($col-nb, $col-span: 1) {
		/* determines width of column based on number of columns $nbcols and gap */
		@media (max-width: $gl-sm-screen) {
			@include width-column($col-nb, $col-span);
		}
	}

	/* standard main content width */
	@mixin width-content() {
		width: 100%;
		max-width: 80vw;
		margin-left: auto;
		margin-right: auto;
		@media (max-width: $gl-sm-screen) {
			max-width: 90vw;
		}
	}

	/* use when content would be too wide, e.g. forms */
	@mixin width-content-narrow() {
		width: 100%;
		max-width: 50vw;
		margin-left: auto;
		margin-right: auto;
		@media (max-width: $gl-sm-screen) {
			max-width: 90vw;
		}
	}
	
	/* full width (of parent) */
	@mixin width-full() {
		/* 2025-08-11: PMO added flex-basis to override flex-basis in @mixin width-column */
		width: calc( 100% - 0.001px );
		max-width: calc( 100% - 0.001px );
	}

	/* use to force full width (of parent) on small screens. */
	@mixin width-full-sm {
		@media (max-width: $gl-sm-screen) {
			/* 2025-08-11: PMO added flex-basis to override flex-basis in @mixin width-column */
			flex-basis: 100%;
			width: 100%;
		}
	}

	/* the widths below are not recommended to use */	

	@mixin width-screen-full() {
		width: 100vw;
	}
	
	@mixin width-onethird {
		width: calc( 33% );
	}
	
	@mixin width-twothirds {
		--column-gap: var(--column-gap-default); 
		width: calc( 67% - var(--column-gap) );	/* reduce main content width when there is a sidebar */
	}

	@mixin width-onefifth {
		width: calc( 20% );
	}
	
	@mixin width-fourfifths {
		--column-gap: var(--column-gap-default); 
		width: calc( 80% - var(--column-gap) );	/* reduce main content width when there is a sidebar */
	}
