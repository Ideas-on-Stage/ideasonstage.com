/*	--------
	screen size breakpoints
	unit: px
	declared as sass variables because css variables don't work in media queries
	-------- */
	$gl-sm-screen: 640px !default; // small screens breakpoint
	$gl-lg-screen: 1440px !default; // large screens breakpoint
	$gl-menu-short: 900px !default; // size under which the short menu display should be used



/*	--------
	mixins
	-------- */

	@mixin a-underline-none {
		/* 
			Removes underline of <a> links
		*/
		border-bottom: none;
	}

	@mixin firstlastchildnomargin {
		/*
			Removes top margin from first element and bottom margin from last element
		*/
		> :first-child {
			margin-top: 0;
		}
		> :last-child {
			margin-bottom: 0;
		}
	}

	@mixin flex-column($gap: "none", $wrap: "nowrap", $align-column-h: flex-start, $align-h: flex-start, $align-v: flex-start) {
		/*
			Creates a flexbox column
		*/
		display: flex;
		flex-direction: column;
		align-content: $align-h;
		align-items: $align-column-h;
		justify-content: $align-v;
		flex-wrap: var(--flex-wrap);
		column-gap: var(--flex-column-gap);
		row-gap: var(--flex-row-gap);
		
		@if "gap" == $gap {
			--flex-column-gap: var(--flex-column-gap-medium);
			--flex-row-gap: var(--flex-row-gap-medium);
		}
		@else if "big" == $gap {
			--flex-column-gap: var(--flex-column-gap-big);
			--flex-row-gap: var(--flex-row-gap-big);
		}
		@else if "none" == $gap {
			--flex-column-gap: 0px;
			--flex-row-gap: 0px;
		}
		@else {
			--flex-column-gap: calc( #{$gap} );
			--flex-row-gap: calc( #{$gap} );
		}
		
		@if "nowrap" == $wrap {
			--flex-wrap: nowrap;
		}
		@else {
			--flex-wrap: wrap;
		}
	}

	@mixin flex-column-sm($flex-direction: column, $gap: "none", $wrap: "nowrap", $align-column-h: flex-start, $align-h: flex-start, $align-v: flex-start) {
		/* 
			Turns a flex-row into a flex-column on small screens
			$flex-direction can be column or column-reverse
		*/
		@media (max-width: $gl-sm-screen) {
			display: flex;
			flex-direction: $flex-direction;
			align-content: $align-h;
			align-items: $align-column-h;
			justify-content: $align-v;
			flex-wrap: var(--flex-wrap);
			column-gap: var(--flex-column-gap);
			row-gap: var(--flex-row-gap);

			
			@if "gap" == $gap {
				--flex-column-gap: var(--flex-column-gap-medium);
				--flex-row-gap: var(--flex-row-gap-medium);
			}
			@else if "big" == $gap {
				--flex-column-gap: var(--flex-column-gap-big);
				--flex-row-gap: var(--flex-row-gap-big);
			}
			@else if "none" == $gap {
				--flex-column-gap: 0px;
				--flex-row-gap: 0px;
			}
			@else {
				--flex-column-gap: calc( #{$gap} );
				--flex-row-gap: calc( #{$gap} );
			}
			
			@if "nowrap" == $wrap {
				--flex-wrap: nowrap;
			}
			@else {
				--flex-wrap: wrap;
			}
		}
	}
	
	@mixin flex-row($gap: "none", $wrap: "nowrap", $align-row-v: flex-start, $align-v: flex-start, $align-h: flex-start) {
		/*
			Creates a flexbox row
		*/
		display: flex;
		flex-direction: row;
		align-content: $align-v;
		align-items: $align-row-v;
		justify-content: $align-h;
		flex-wrap: var(--flex-wrap);
		column-gap: var(--flex-column-gap);
		row-gap: var(--flex-row-gap);
		
		@if "gap" == $gap {
			--flex-column-gap: var(--flex-column-gap-medium);
			--flex-row-gap: var(--flex-row-gap-medium);
		}
		@else if "big" == $gap {
			--flex-column-gap: var(--flex-column-gap-big);
			--flex-row-gap: var(--flex-row-gap-big);
		}
		@else if "none" == $gap {
			--flex-column-gap: 0px;
			--flex-row-gap: 0px;
		}
		@else if "skip" == $gap {
			// nothing
		}
		@else {
			--flex-column-gap: calc( #{$gap} );
			--flex-row-gap: calc( #{$gap} );
		}
		
		@if "nowrap" == $wrap {
			--flex-wrap: nowrap;
		}
		@else {
			--flex-wrap: wrap;
		}
	}

	@mixin height-screen-full {
		/* set height to screen height (actually viewport height) */
		height: calc(100vh - var(--menubar-height));
	}
	
	@mixin height-parent-full {
		/* set height to full height of parent container */
		height: 100%;
	}
	
	@mixin height-parent-half {
		/* set height to half height of parent container */
		height: 50%;
	}
	
	@mixin height-parent-half-sm {
		/* set height to half height of parent container on small screens */
		@media (max-width: $gl-sm-screen) {
			height: 50%;
		}
	}
	
	@mixin height-hero {
		/* set height to fixed hero height */
		height: var(--hero-height);
	}
	
	@mixin height-module {
		/* set height to fixed module height */
		height: calc( var(--module-height-ratio) * 1vw ); /* defines the fixed height of the module */
		max-height: calc( var(--page-max-width) / 80 * var(--module-height-ratio) );
	}
	
	@mixin height-navbar {
		/* set height to navbar height */
		height: var(--menubar-height);
	}
	
	@mixin hide-sm {
		/* hide element on small screens */
		@media (max-width: $gl-sm-screen) {
			display: none;
		}
	}
	
	@mixin img-back($z-index: -100) {
		/*
			puts image in the back as a background image, full size of parent
			(also see text-front to put text in front of image)
		*/
		height: 100%; /* ! parent container must have height in absolute unit or 100%, but not 0-99% */
		width: 100%; /* ! parent container must have width in absolute unit or 100%, but not not 0-99% */
		object-fit: cover;
		@if 0 != $z-index {
			z-index: $z-index;
		}
	}
	
	@mixin img-circle($size) {
		/* round image */
		width: $size !important;
		height: $size !important;
		border-radius: 50%;
	}
	
	@mixin img-contain {
		/* image full width of parent container, height based on image ratio */
		display: block;
		height: 100%;
		width: 100%;
		object-fit: contain;
	}

	@mixin img-cover {
		/* image full size of parent container, cropped to fill parent container */
		display: block;
		height: 100%;
		width: 100%;
		object-fit: cover;
	}

	@mixin img-responsive {
		display: block; /* prevent line height from being added to div height */
		max-width: 100%;
		height: auto;
	}
	
	@mixin img-sameline {
		/* image on same line as text, useful to add icons in text */
		display: inline-block;
	}
	
	@mixin layer($z-index: -100) {
		position: absolute;
		height: inherit; /* ! parent container must have height in absolute unit or 100%, but not 0-99% */
		width: inherit; /* ! parent container must have width in absolute unit or 100%, but not not 0-99% */
		max-width: inherit;
		object-fit: cover;
		@if 0 != $z-index {
			z-index: $z-index;
		}
	}
	
	@mixin layer-img-overlay-text($overlay-opacity: 60%, $text-align-v: center) {
		.img {
			@include layer($z-index: 10);
			> img {
				@include img-back($z-index: -1);
			}
		}
		
		.overlay {
			@include layer($z-index: 20);
			background-color: var(--color-overlay);
		}
		
		/* main text container, may have to share space with a logobar */
		.text {
			@include text-front();
			@include height-parent-full(); /* same height as parent so text can be centered inside div */
			@include width-content();
			@include flex-column($align-column-h: center, $align-v: $text-align-v);
			padding: 2rem;
			--color-back: none;
		}
	}
	
	@mixin margins($vertical: "", $top: "", $bottom: "") {
		/*
			standardized margins for theme
			marginv: "tall", "medium", "short", "none"
		*/
		
		@if "tall" == $vertical {
			margin-top: 5rem;
			margin-bottom: 5rem;
		}
		@else if "medium" == $vertical {
			margin-top: 3rem;
			margin-bottom: 3rem;		
		}
		@else if "short" == $vertical {
			margin-top: 1rem;
			margin-bottom: 1rem;
		}
		@else if "none" == $vertical {
			margin-top: 0rem;
			margin-bottom: 0rem;
		}
		
		@if "tall" == $top {
			margin-top: 5rem;
		}
		@else if "medium" == $top {
			margin-top: 3rem;
		}
		@else if "short" == $top {
			margin-top: 1rem;
		}
		@else if "none" == $top {
			margin-top: 0rem;
		}
		
		@if "tall" == $bottom {
			margin-bottom: 5rem;
		}
		@else if "medium" == $bottom {
			margin-bottom: 3rem;		
		}
		@else if "short" == $bottom {
			margin-bottom: 1rem;
		}
		@else if "none" == $bottom {
			margin-bottom: 0rem;
		}
	}

	@mixin padding($vertical: "", $top: "", $bottom: "") {
		/*
			standardized padding
			padding: "tall", "medium", "short", "none"
		*/
		
		@if "tall" == $vertical {
			padding-top: 5rem;
			padding-bottom: 5rem;
		}
		@else if "medium" == $vertical {
			padding-top: 3rem;
			padding-bottom: 3rem;		
		}
		@else if "short" == $vertical {
			padding-top: 1rem;
			padding-bottom: 1rem;
		}
		@else if "none" == $vertical {
			padding-top: 0rem;
			padding-bottom: 0rem;
		}
		
		@if "tall" == $top {
			padding-top: 5rem;
		}
		@else if "medium" == $top {
			padding-top: 3rem;
		}
		@else if "short" == $top {
			padding-top: 1rem;
		}
		@else if "none" == $top {
			padding-top: 0rem;
		}
		
		@if "tall" == $bottom {
			padding-bottom: 5rem;
		}
		@else if "medium" == $bottom {
			padding-bottom: 3rem;		
		}
		@else if "short" == $bottom {
			padding-bottom: 1rem;
		}
		@else if "none" == $bottom {
			padding-bottom: 0rem;
		}
	}

	@mixin scroll-h {
		/*
			Creates container with horizontal overflow + horizontal scroll bar.
			Useful for carousel.
		*/
		
		overflow-x: scroll;
		
		&::-webkit-scrollbar {
			height: 0.4em;
		}
		&::-webkit-scrollbar-track {
			/* Track */
			border-radius: 10px;
			background: #ddd;
			opacity: 0.5;
		}
		&::-webkit-scrollbar-thumb {
			/* Handle */
			background: #222; 
			border-radius: 10px;
			opacity: 0.4;
		}	
		
	}
	
	@mixin text-front($z-index: 100) {
		/* 
			puts text front, often to layer it above an image
			(also see img-back to put image in the background)
		*/
		position: relative;	/* enables z-index */
		z-index: $z-index; /* if text overflows, it will go over picture below */

	}

	/*
		ul-container()
		
		turns a ul tag into an unstyled container
		- no bullets in front of li items
		- no indents
	*/
	@mixin ul-container {
		margin-top: 0;
		margin-bottom: 0;
		list-style-type: none;
		text-indent: 0;
		padding-left: 0;
	}
	
	/*
		width-column()
		
		calculates exact width of item based on a column system.
		
		Parameters:
		- $col-nb: the number of columns to use to divide the total width
		  eg. 3 will result in a one-third width, 5 in a one-fifth width, minus the gaps
		- $col-span: the number of columns covered by the ite
		  eg if $col-nb is 3 and $col-span is 2, the item will be two-thirds width.
		
		Note: parent must be a flex-container with a specified width in absolute units.
		a width of 100% will work only if the parent is actually 100% of total width of viewport
		if parent has no width specified, the result will be wonky.
	*/
	@mixin width-column($col-nb, $col-span: 1) {		
		$gap-nb: $col-nb - 1;
		$gap-span: $col-span - 1;
		flex-basis: calc( ( 100% - #{$gap-nb} * var(--flex-column-gap) ) / #{$col-nb} * #{$col-span} + var(--flex-column-gap) * #{$gap-span} - 0.001px + 0.001px );
		width: calc( ( 100% - #{$gap-nb} * var(--flex-column-gap) ) / #{$col-nb} * #{$col-span} + var(--flex-column-gap) * #{$gap-span} - 0.001px + 0.001px );
	}
	
	/*
		width-column-sm()
		
		calculates exact width of item based on a column system for small screens.
		
		for example:
		@include width-column(3,2); → item will be tho-thirds on normal screens.
		@include width-column-sm(1); → but item will switch to full parent width on small screens.
	*/
	@mixin width-column-sm($col-nb, $col-span: 1) {
		@media (max-width: $gl-sm-screen) {
			@include width-column($col-nb, $col-span);
		}
	}

	/*
		width-content()
		
		set width of element to a maximum of "--content-max-width"
		default is 80vw on normal screens
		--content-max-width is defined in schemes.yaml		
		the value of --content-max-width will adapt automatically for small screens
	*/
	@mixin width-content() {
		width: calc( 0.001px + 100% - 0.001px );
		max-width: var(--content-max-width);
		margin-left: auto;
		margin-right: auto;
	}

	/*
		width-content-sm()
		set width of element to a maximum of "--content-max-width" on small screens
		if you already use width-content() for a given element,
		then there is no need to add width-content-sm() for that element
	*/
	@mixin width-content-sm() {
		@media (max-width: $gl-sm-screen) {
			width: calc( 0.001px + 100% - 0.001px );
			max-width: var(--content-max-width);
			margin-left: auto;
			margin-right: auto;
		}
	}

	/*
		width-content-narrow()
		
		set width of element to a maximum of "--content-narrow-max-width" on small screens
		default is 50vw on normal screens
		--content-narrow-max-width is defined in schemes.yaml
		use to restrict content width on normal or large screens,
		for example for the forms so the fields are not too large.
	*/
	@mixin width-content-narrow() {
		width: calc( 0.001px + 100% - 0.001px );
		max-width: var(--content-narrow-max-width);
		margin-left: auto;
		margin-right: auto;
	}
	
	/* 
		width-parent-full()
		
		set width of element to full width of parent
	*/
	@mixin width-parent-full() {
		width: calc( 0.001px + 100% - 0.001px );
		max-width: var(--page-max-width);
	}

	/*
		width-parent-full-sm()
		
		set width of element to full width of parent on small screens.
		useful if an element is half width on normal screens,
		but should be full width on small screens.
	*/
	@mixin width-parent-full-sm() {
		@media (max-width: $gl-sm-screen) {
			/* 2025-08-11: PMO added flex-basis to override flex-basis in @mixin width-column.
				note: this should probably be removed, and I should fix the way width-column is handled. */
			flex-basis: calc( 0.001px + 100% - 0.001px );
			width: calc( 0.001px + 100% - 0.001px );
			max-width: calc( 0.001px + 100% - 0.001px );
		}
	}
