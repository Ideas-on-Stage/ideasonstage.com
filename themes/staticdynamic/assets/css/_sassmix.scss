/*
	screen size breakpoints
	unit: px
	declared as sass variables because css variables don't work in media queries
*/
	$gl-sm-screen: 720px !default;
	$gl-lg-screen: 1920px !default;
	$gl-menu-short: 900px !default;


/*
	mixins
*/

	/* remove top margin from first element and bottom margin from last element */
	@mixin firstlastchildnomargin {
		> :first-child {
			margin-top: 0;
		}
		> :last-child {
			margin-bottom: 0;
		}
	}

	/* default "responsive" image */
	@mixin img-resp {
		display: block; /* prevent line height from being added to div height */
		max-width: 100%;
		height: auto;
		object-fit: contain;
	}

	/* margins for content
		marginv: "tall", "medium", "small", "none"
		marginh: "wide", "normal", "gap", "none"
	*/
	@mixin margins($marginv: "medium", $marginh: "normal") {
		
		@if "tall" == $marginv {
			margin-top: 5em !important;
			margin-bottom: 5em !important;
		}
		@else if "medium" == $marginv {
			margin-top: 3em !important;
			margin-bottom: 3em !important;		
		}
		@else if "small" == $marginv {
			margin-top: 1em !important;
			margin-bottom: 1em !important;
		}
		@else if "none" == $marginv {
			margin-top: 0 !important;
			margin-bottom: 0 !important;
		}
		
		@if "normal" == $marginh {
			margin-left: auto; /* use auto to center div on page */
			margin-right: auto; /* use auto to center div on page */
			width: 80vw;
			max-width: var(--content-max-width); /* prevents text area from getting unpleasantly wide */
			@media (max-width: $gl-sm-screen) {
				margin-left: var(--module-column-gap);
				margin-right: var(--module-column-gap); 
				width: calc(100% - var(--module-column-gap) * 2);
				max-width: calc(100% - var(--module-column-gap) * 2);
			}
		}
		@else if "wide" == $marginh {
			/* use for narrow content such as forms */
			margin-left: auto; /* use auto to center div on page */
			margin-right: auto; /* use auto to center div on page */
			width: 50vw;
			max-width: var(--content-max-width-narrow); /* prevents text area from getting unpleasantly wide */
			@media (max-width: $gl-sm-screen) {
				margin-left: var(--module-column-gap);
				margin-right: var(--module-column-gap);
				width: calc(100% - var(--module-column-gap) * 2 );
				max-width: calc(100% - var(--module-column-gap) * 2 );
			}
		}
		@else if "gap" == $marginh {
				margin-left: var(--module-column-gap);
				margin-right: var(--module-column-gap); 
				width: calc(100% - var(--module-column-gap) * 2);
		}
		@else if "none" == $marginh {
				margin-left: 0;
				margin-right: 0;
				width: calc( 100% );
		}
	}

	/* use to display two columns that become 1 vertical column on sm screens */
	@mixin two-columns($sm-screen-direction: column) {
		display: flex;
		flex-direction: row;
		align-items: flex-start;
		gap: var(--module-big-gap);
		@media (max-width: $gl-sm-screen) {
			flex-direction: $sm-screen-direction;
		}
	}
