
{{ $files := slice "sidebar" "fastsearch" "testimonials" "footer" "contact" "iosform" }}
{{ $context := . }}
{{ range $files }}
	{{ $resource := printf "css/%s.scss" . }}
	{{ $cssfile := printf "%s.css" . }}
	{{- $css := resources.Get $resource | resources.ExecuteAsTemplate $cssfile $context | resources.ToCSS | resources.Minify -}}
	{{- $css.Content | safeCSS -}}
{{ end }}


	
/* @group LAYOUT-MODULE */
	
	/*
	Modules are containers with predefined sizes.
	.layout-module: standard module, fixed height
	.layout-module-half standard module, fixed height, half-width
	.layout-module-screen-full full screen module
	.layout-module-hero hero module, fixed hero height
	
	To add a gap between modules, wrap them in a .layout-module-group div
	
	Inside modules, you have the following predefined layouts:
	.layout-module-row to display an image and text side by side
	.layout-module-column to display image and text in a column
	.layout-module-layer to layer elements on top of each other (eg an image in the back, text on top)
	*/
	
	/* Use this to create a full width module div */
	.layout-module {
		display: flex;
		height: var(--module-height); /* defines the fixed height of the module */
		width: calc(100% - 0px);
		max-height: calc( var(--page-max-width) / 100 * 40 );
		max-width: var(--page-max-width);
		overflow: hidden;
	}
	
	/* Or use this to create a half width module div */
	.layout-module-half {
		flex-direction: column;
		width: calc( ( 100% - var(--module-column-gap) ) / 2 - 0.001px ); /* -0.001px to avoid rounding errors in FFox */
	}
	
	/* full screen layout module */
	.layout-module-screen-full {
		height: calc(100vh - var(--menubar-height));
		width: calc(100% - 0px);
	}
		/* Enclose modules in a layout-module-group div to have a gap between them */		
	.layout-module-group {
		width: calc(100% - 0px);
		display: flex;
		flex-direction: row; /* to display half modules side by side */
		flex-wrap: wrap; /* to create additional rows if necessary */
		margin: var(--module-row-gap) 0;
		padding: 0 var(--module-column-gap);
		gap: var(--module-row-gap) var(--module-column-gap);
	}
	
	/* use to create module div with pic on left, text on right */
	.layout-module-row {
		flex-direction: row;
	}
	
	/* use to create inner div with the pic on left */
	.layout-module-row-image {
		height: 100%;
		width: 64%;
	}
	.layout-module-row-image img {
		display: block;
		height: 100%;
		width: 100%;
		object-fit: cover;
		object-position: 100% 50%; /* anchor on right edge (100%), vertical center */
	}
	
	/* use to create inner div with text on right */
	.layout-module-row-text {
		padding: 4vw;
		width: 36%;
	}
	
	/* use to create module div with text on top, image below */
	.layout-module-column {
		flex-direction: column;
	}
	
	/* use to create inner div with text on top */
	.layout-module-column-text {
		position: relative;	/* enables z-index */
		z-index: 10; /* if text overflows, it will go over picture below */
		padding: 2vw 4vw;
		margin: auto;
		height: 50%;
		width: 100%;
		text-align: center;
	}
	
	/* use to create inner div with image on bottom */
	.layout-module-column-image {
		height: 50%; /* without this, image size can overflow from module */
		width: 100%;
	}
	.layout-module-column-image img {	
		height: 100%;
		width: 100%;
		object-fit: contain; /* image is never distorted, crop if necessary */
		object-position: 50% 100%; /* anchor on bottom, horizontal center */
	}
	
	/* use to layer elements on top of each other, one layer per element */
	.layout-module-layer {
		position: absolute;
		height: inherit;
		width: inherit;
		max-height: inherit;
		max-width: inherit;
	}
	.layout-module-layer > img {
		height: inherit; /* ! works only if height of parent is calculated as vw or px, not % */
		width: inherit; /* ! works only if width of parent is calculated as vw or px, not % */
		max-height: inherit;
		max-width: inherit;
		object-fit: cover;
	}	
	.layout-module-half .layout-module-layer {
		/* half module layers have a width of 50% */
		width: calc( ( 100% - var(--module-column-gap) ) / 2 - 0.001px ); /* -0.001px to avoid rounding errors in FFox */
	}

	.layout-module-group .layout-module-half .layout-module-layer {
		width: calc( ( 100% - var(--module-column-gap) * 3 ) / 2);
	}
	
	.layout-module .layout-module-layer,
	.layout-module-half .layout-module-layer {
		height: var(--module-height);
	}
	
	@media (max-width:480px) {
		
		.layout-module-group {
			margin: var(--module-ts-row-gap) 0;
			padding: 0;
			gap: var(--module-ts-row-gap) var(--module-ts-column-gap);
		}
		
		.margin {
			width: calc(100% - var(--module-ts-column-gap) * 2);
			margin-left: var(--module-ts-column-gap);
			margin-right: var(--module-ts-column-gap);
		}
		
		.layout-module {
			height: var(--module-ts-height);
		}
		
		.layout-module-half {
			width: 100%; /* make half width modules full width on ts screens */
		}
		
		.layout-module-row {
			height:  var(--module-ts-height);
			width: 100%;
			flex-direction: column-reverse;
			justify-content: space-between;
		}
		
		.layout-module-row-image {
			height: 50%;
			width: 100%;
		}
		
		.layout-module-row-text {
			padding: 8vw;
			height: 50%;
			width: 100%;
			text-align: center;
		}
		
		.layout-module-column {
			height: var(--module-ts-height);
		}
		.layout-module-column-text {
			padding: 8vw;
		}
		.layout-module-column-image img {
			object-fit: cover; /* use cover instead of contain on ts screens */
		}
		
		.layout-module-layer {
			width: 100%;
			height: inherit;
		}
		.layout-module .layout-module-layer,
		.layout-module-half .layout-module-layer {
			height: var(--module-ts-height);
		}
		
	}
	
/* @end */



/* @group LAYOUT HELPER CLASSES */
		
	.layout-absolute {
		position: absolute;
	}
	
	.layout-fixed {
		position: fixed;
	}
	
	.layout-sticky {
		position: sticky;
		top: var(--menubar-height);
		z-index: 100;	
	}
	
	.layout-double-sticky {
		position: sticky;
		top: calc(var(--menubar-height) + 1.6em + .4vw);
		z-index: 99;	
	}
	
	@media (max-width:480px) {
		
		.layout-double-sticky {
			position: relative;
			top: 0;
		}
		
	}
	
/* @end */



/* @group FLEX */

	/* .flex- is a series of classes to implement generic flexbox */
	/* .layout- are defined for a precise use, .flex- is more generic */
	
	/* flex parent that wraps if too large */
	.flex-parent {
		display: flex;
		margin: 0;
		padding: 0;
		width: 100%;
		height: 100%;
	}
		
	.flex-parent-row {
		flex-direction: row;
		justify-content: space-between;
		flex-wrap: wrap;
		align-items: flex-start;
	}
	
	.flex-parent-column {
		flex-direction: column;
		flex-wrap: nowrap;
		align-items: stretch;
	}
		
	/* standard flex child */
	.flex-child {
		flex: 1;
		flex-basis: auto;
		flex-grow: 0;
		flex-shrink: 0;
		margin: 0;
		padding: 0;
		max-height: 100%;
		max-width: 100%;
		height: auto;
	}
	.flex-child img {
		display: block; /* prevent line height from being added to div height */
		margin: 0;
		padding: 0;
		width: 100%;
		height: auto;
		object-fit: contain;
	}
	
	.flex-child-scroll {
		height: auto;
	}
	
	.flex-child-text {
		padding: 2vw;
	}
	
	/* adjust child to text on left of pic */
	.flex-child-text-left {
		padding-right: 2vw;
	}
	
	/* adjust child to text on right of pic */
	.flex-child-text-right {
		padding-left: 2vw;
	}
	
	.logo {
		display: block;
		margin: 0;
		padding: 0;
		width: 32px;
		height: 32px;
	}
	
	@media (min-width : 481px) {
		
		/* flex child constrained to 60% of available space */
		.flex-child-100p {
			width: calc(100% - 0.001px);
		}
		
		/* flex child constrained to 60% of available space */
		.flex-child-80p {
			width: calc(80% - 0.001px);
		}
		.flex-parent-gap .flex-child-80p {
			width: calc(var(--module-5c-width) * 4 + var(--module-column-gap) * 3 );
		}
		
		/* flex child constrained to 2/3 of available space */
		.flex-child-67p {
			width: calc(100% / 12 * 8 - 0.001px); /* start at 67% width */
		}
		.flex-parent-gap .flex-child-67p {
			width: calc(var(--module-12c-width) * 8 + var(--module-column-gap) * 7 );
		}
		.flex-parent-gap-big .flex-child-67p {
			width: calc( 67% - var(--module-big-gap) / 2 );
		}
		
		/* flex child constrained to 60% of available space */
		.flex-child-60p {
			width: calc(60% - 0.001px);
		}
		.flex-parent-gap .flex-child-60p {
			width: calc( var(--module-5c-width) * 3 + var(--module-column-gap) * 2 );
		}
		.flex-parent-gap-big .flex-child-60p {
			width: calc( 60% - var(--module-big-gap) / 2 );
		}
		
		/* flex child constrained to 50% of available space */
		.flex-child-50p {
			width: calc(50% - 0.001px); /* start at 60% width */
		}
		.flex-parent-gap .flex-child-50p {
			width: calc(var(--module-12c-width) * 6 + var(--module-column-gap) * 5 );
		}		
		
		/* flex child constrained to 40% of available space */
		.flex-child-40p {
			width: calc(40% - 0.001px);
			box-sizing: border-box;
		}
		.flex-parent-gap .flex-child-40p {
			width: calc(var(--module-5c-width) * 2 + var(--module-column-gap) * 1 );
		}		
		.flex-parent-gap-big .flex-child-40p {
			width: calc( 40% - var(--module-big-gap) / 2 );
		}
		
		/* flex child constrained to 1/3 of available space */
		.flex-child-33p {
			width: calc( (100% / 3) - 0.001px );
		}
		.flex-parent-gap .flex-child-33p {
			width: calc(var(--module-12c-width) * 4 + var(--module-column-gap) * 3 );
		}
		.flex-parent-gap-big .flex-child-33p {
			width: calc( 33% - var(--module-big-gap) / 2 );
		}
		
		.flex-child-25p {
			width: calc(25% - 0.001px);
		}
		.flex-parent-gap .flex-child-25p {
			width: calc(var(--module-12c-width) * 3 + var(--module-column-gap) * 2 );
		}
		
		.flex-child-20p {
			width: calc(20% - 0px);
		}
		.flex-parent-gap .flex-child-20p {
			width: calc(var(--module-5c-width));
		}
		
		.flex-child-16p {
			width: calc( (100% / 6) - 0.001px);
		}
		.flex-parent-gap .flex-child-16p {
			width: calc(var(--module-12c-width) * 2 + var(--module-column-gap) * 1 );
		}
		
	}
	
	@media (max-width:480px) {
		
		/* on ts screens, use a width of 100% for these sizes */
		.flex-child-100p,
		.flex-child-67p,
		.flex-child-60p,
		.flex-child-50p,
		.flex-child-40p,
		.flex-child-33p {
			width: calc( 100% - 0.001px );
		}
		
		/* on ts screens, use a width of 50% for these sizes */
		.flex-child-25p {
			width: calc( 50% - 0.001px );
		}
		.flex-parent-gap .flex-child-25p {
			width: calc( ( 100% - var(--module-ts-column-gap) ) / 2 );
		}
		
		/* on ts screens, use a width of 66% for these sizes */
		.flex-child-80p {
			width: calc( 100% / 3 * 2 - 0.001px );
		}
		.flex-parent-gap .flex-child-80p,
		{
			width: calc( var(--module-ts-12c-width) * 8 + var(--module-ts-column-gap) * 7 );
		}
		
		/* on ts screens, use a width of 33% for these sizes */
		.flex-child-20p,
		.flex-child-16p {
			width: calc( 100% / 3 - 0.001px );
		}
		.flex-parent-gap .flex-child-20p,
		.flex-parent-gap .flex-child-16p {
			width: calc( var(--module-ts-12c-width) * 4 + var(--module-ts-column-gap) * 3 );
		}
		
	}

/* @end */



/* @group flex helper classes */
	
	.flex-parent-align-center {
		/* center flex items (vertically for row, horizontally for col */
		align-items: center;
	}
	
	.flex-parent-align-end {
		/* align flex items (vertically for row, horizontally for col */
		align-items: flex-end;
	}
	
	.flex-parent-align-start {
		/* align flex items (vertically for row, horizontally for col */
		align-items: flex-start;
	}
	
	.flex-parent-align-stretch {
		/* stretch flex items (vertically for row, horizontally for col */
		align-items: stretch;
	}
	
	.flex-child-align-center {
		/* force one child to center itself  */
		align-self: center;
	}
	
	.flex-parent-justify-center {
		/* center flex items (horizontally for row, vertically for col */
		justify-content: center;
	}
	
	.flex-parent-justify-start {
		/* force all items at start of flex container */
		justify-content: flex-start;
	}
	
	.flex-parent-justify-end {
		/* force all items at end of flex container */
		justify-content: flex-end;
	}
	
	.flex-parent-justify-space-between {
		/* add even space between items */
		justify-content: space-between;
	}
	
	.flex-parent-justify-space-around {
		/* add even space between items */
		justify-content: space-around;
	}
	
	.flex-parent-nowrap {
		/* disable wrap */
		flex-wrap: nowrap;
	}
	
	.flex-parent-wrap {
		flex-wrap: wrap;
	}
	
	.flex-parent-gap {
		gap: var(--module-row-gap) var(--module-column-gap);
	}
	.flex-parent-gap-big {
		gap: var(--module-big-gap);
	}
	
	
	@media (max-width:480px) {
		
		/* change flex-direction to column on tall smartphone screens */
		.flex-parent-column-ontall {
			flex-direction: column;
			flex-wrap: nowrap;
		}
		
		/* change flex-direction to column-reverse on tall smartphone screens */
		.flex-parent-column-reverse-ontall {
			flex-direction: column-reverse;
			flex-wrap: nowrap;
		}
		
		.flex-parent-column-ontall .flex-child-text-left {
			/* text was on left of img, now above */
			padding-right: 0;
			padding-top: 4vw;
			padding-bottom: 2vw;
		}
		
		.flex-parent-column-reverse-ontall .flex-child-text-left {
			/* text was on left of img, now below */
			padding-top: 4vw;
			padding-right: 0;
		}
		
		.flex-parent-column-ontall .flex-child-text-right {
			/* text was on right of img, now below */
			padding-top: 4vw;
			padding-left: 0;
		}
		
		.flex-parent-column-reverse-ontall .flex-child-text-right {
			/* text was on right of img, now above */
			padding-left: 0;
			padding-top: 4vw;
			padding-bottom: 2vw;
		}
		
		.flex-parent-gap {
			gap: var(--module-ts-row-gap) var(--module-ts-column-gap);
		}
		
		.flex-parent-gap-big {
			gap: var(--module-ts-big-gap);
		}			
		
	}
	
/* @end */



/* @group HELPER CLASSES */

	
	/* text helper classes */
	
	.text-primary	{ color: var(--color-primary);		}
	.text-faded		{ color: rgba(255,255,255,.7);	}
	.text-blue		{ color: rgb(51,53,65);			}
	.text-white		{ color: #fff;					}
	.text-gray		{ color: #888;					}
	.text-dark		{ color: #222;					}
	.text-red		{ color: red 					}

	.text-center	{ text-align: center;				}
	
	/* padding helper classes */

	.padding-huge		{ padding: 80px;		}
	.padding-large		{ padding: 60px;		}
	.padding-medium		{ padding: 40px;		}
	.padding-small		{ padding: 20px;		}
	.padding-tiny 		{ padding: 10px;		}
	.padding-none 		{ padding: 0px;			}
	
	.paddingt-huge		{ padding-top: 80px;	}
	.paddingt-large		{ padding-top: 60px;	}
	.paddingt-medium	{ padding-top: 40px;	}
	.paddingt-small		{ padding-top: 20px;	}
	.paddingt-tiny		{ padding-top: 10px;	}
	.paddingt-none		{ padding-top: 0px;		}
	
	.paddingb-huge		{ padding-bottom: 80px;	}
	.paddingb-large		{ padding-bottom: 60px;	}
	.paddingb-medium	{ padding-bottom: 40px;	}
	.paddingb-small		{ padding-bottom: 20px;	}
	.paddingb-tiny		{ padding-bottom: 10px;	}
	.paddingb-none		{ padding-bottom: 0px;	}
	
	.paddingv-huge {
		padding-top: 80px;
		padding-bottom: 80px;	
	} 
	.paddingv-large 	{	
		padding-top: 60px;
		padding-bottom: 60px;	
	}
	.paddingv-medium {
		padding-top: 40px;
		padding-bottom: 40px;
	}
	.paddingv-small 	{
		padding-top: 20px;
		padding-bottom: 20px;
	}
	.paddingv-tiny {
		padding-top: 10px;
		padding-bottom: 10px;
	}
	.paddingv-none {
		padding-top: 0;
		padding-bottom: 0;
	}

	.paddingh-huge {
		padding-left: 80px;
		padding-right: 80px;
	}
	.paddingh-large {
		padding-left: 60px;
		padding-right: 60px;
	}
	.paddingh-medium {
		padding-left: 40px;
		padding-right: 40px;
	}
	.paddingh-small	{
		padding-left: 20px;
		padding-right: 20px;
	}
	.paddingh-tiny {
		padding-left: 10px;
		padding-right: 10px;
	}
	.paddingh-none {
		padding-left: 0px;
		padding-right: 0px;
	}

	/* margin helper classes */
	
	.margin-huge {
		margin: 80px;
	}
	.margin-large 	{
		margin: 60px;
	}
	.margin-medium { 
		margin: 40px;
	}
	.margin-small 	{
		margin: 20px;
	}
	.margin-tiny {
		margin: 10px;	
	}
	.margin-none { 
		margin: 0px;
	}

	.margint-huge	{ margin-top: 80px;	} 
	.margint-large	{ margin-top: 60px;	} 
	.margint-medium { margin-top: 40px;	} 
	.margint-small	{ margin-top: 20px;	}
	.margint-tiny	{ margin-top: 10px;	}
	.margint-none	{ margin-top: 0px;	}
	
	.marginb-huge	{ margin-bottom: 80px;	}
	.marginb-large	{ margin-bottom: 60px;	}
	.marginb-medium	{ margin-bottom: 40px;	}
	.marginb-small	{ margin-bottom: 20px;	}
	.marginb-tiny	{ margin-bottom: 10px;	}
	.marginb-none	{ margin-bottom: 0px;	}
	
	.marginh-huge {
		margin-left: 80px;
		margin-right: 80px;
	}
	.marginh-large {
		margin-left: 60px;
		margin-right: 60px;
	}
	.marginh-medium	{
		margin-left: 40px;
		margin-right: 40px;
	}
	.marginh-small {
		margin-left: 20px;
		margin-right: 20px;
	}
	.marginh-tiny {
		margin-left: 10px;
		margin-right: 10px;
	}
	.marginh-none {
		margin-left: 0px;
		margin-right: 0px;
	}
	
	.marginv-huge {
		margin-top: 80px;
		margin-bottom: 80px;
	}
	.marginv-large	 {
		margin-top: 60px;
		margin-bottom: 60px;
	}
	.marginv-medium {
		margin-top: 40px;
		margin-bottom: 40px;
	}
	.marginv-small	 {
		margin-top: 20px;
		margin-bottom: 20px;
	}
	.marginv-tiny	{
		margin-top: 10px;
		margin-bottom: 10px;
	}
	.marginv-none {
		margin-top: 0px;
		margin-bottom: 0px;
	}
	
	.centered {
		text-align: center;
		width:100%;
	}
	
	.height-auto {
		height: auto;
	}
	
	.border {
		border: 1px solid #888;
		box-sizing: border-box;
	}
		
/* @end */
