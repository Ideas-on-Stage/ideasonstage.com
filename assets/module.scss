/* @group LAYOUT-MODULE */
	
	/*
	Modules are containers with predefined sizes.
	.layout-module: standard module, fixed height
	.layout-module-half standard module, fixed height, half-width
	.layout-module-screen-full full screen module
	.layout-module-hero hero module, fixed hero height
	
	To add a gap between modules, wrap them in a .layout-module-group div
	
	Inside modules, you have the following predefined layouts:
	.layout-module-row to display an image and text side by side
	.layout-module-column to display image and text in a column
	.layout-module-layer to layer elements on top of each other (eg an image in the back, text on top)
	*/
	
	/* Use this to create a full width module div */
	.layout-module {
		display: flex;
		height: var(--module-height); /* defines the fixed height of the module */
		width: calc(100% - 0px);
		max-height: calc( var(--page-max-width) / 100 * 40 );
		max-width: var(--page-max-width);
		overflow: hidden;
	}
	
	/* Or use this to create a half width module div */
	.layout-module-half {
		flex-direction: column;
		width: calc( ( 100% - var(--module-column-gap) ) / 2 - 0.001px ); /* -0.001px to avoid rounding errors in FFox */
	}
	
	/* Enclose modules in a layout-module-group div to have a gap between them */		
	.layout-module-group {
		width: calc(100% - 0px);
		display: flex;
		flex-direction: row; /* to display half modules side by side */
		flex-wrap: wrap; /* to create additional rows if necessary */
		margin: var(--module-row-gap) 0;
		padding: 0 var(--module-column-gap);
		gap: var(--module-row-gap) var(--module-column-gap);
	}
	
	/* use to create module div with pic on left, text on right */
	.layout-module-row {
		flex-direction: row;
	}
	
	/* use to create inner div with the pic on left */
	.layout-module-row-image {
		height: 100%;
		width: 64%;
	}
	.layout-module-row-image img {
		display: block;
		height: 100%;
		width: 100%;
		object-fit: cover;
		object-position: 100% 50%; /* anchor on right edge (100%), vertical center */
	}
	
	/* use to create inner div with text on right */
	.layout-module-row-text {
		padding: 4vw;
		width: 36%;
		display: flex;
		flex-direction: column;
		justify-content: center;
	}
	
	.layout-module-row-text h3 {
		font-size: 1.5em;
		text-transform: uppercase;
	}

	.layout-module-row-text p {
		font-size: 1em;
	}
		
	/* use to create module div with text on top, image below */
	.layout-module-column {
		flex-direction: column;
	}
	
	/* use to create inner div with text on top */
	.layout-module-column-text {
		position: relative;	/* enables z-index */
		z-index: 10; /* if text overflows, it will go over picture below */
		padding: 2vw 4vw;
		margin: auto;
		height: 50%;
		width: 100%;
		text-align: center;
	}

	.layout-module-column-text h3 {
		font-size: 1.5em;
		text-transform: uppercase;
	}

	.layout-module-column-text p {
		font-size: 1em;
	}
	
	/* use to create inner div with image on bottom */
	.layout-module-column-image {
		height: 50%; /* without this, image size can overflow from module */
		width: 100%;
	}
	.layout-module-column-image img {	
		height: 100%;
		width: 100%;
		object-fit: contain; /* image is never distorted, crop if necessary */
		object-position: 50% 100%; /* anchor on bottom, horizontal center */
	}
	
	/* use to layer elements on top of each other, one layer per element */
	.layout-module-layer {
		position: absolute;
		height: inherit;
		width: inherit;
		max-height: inherit;
		max-width: inherit;
	}
	.layout-module-layer > img {
		height: inherit; /* ! works only if height of parent is calculated as vw or px, not % */
		width: inherit; /* ! works only if width of parent is calculated as vw or px, not % */
		max-height: inherit;
		max-width: inherit;
		object-fit: cover;
	}	
	.layout-module-half .layout-module-layer {
		/* half module layers have a width of 50% */
		width: calc( ( 100% - var(--module-column-gap) ) / 2 - 0.001px ); /* -0.001px to avoid rounding errors in FFox */
	}

	.layout-module-group .layout-module-half .layout-module-layer {
		width: calc( ( 100% - var(--module-column-gap) * 3 ) / 2);
	}
	
	.layout-module .layout-module-layer,
	.layout-module-half .layout-module-layer {
		height: var(--module-height);
	}
	
	/* remove gap for module right after title */
	.layout-module-title + .layout-module, {
		margin-top: 0;
	}
	
	@media (max-width:480px) {
		
		.layout-module-group {
			margin: var(--module-ts-row-gap) 0;
			padding: 0;
			gap: var(--module-ts-row-gap) var(--module-ts-column-gap);
		}
		
		.margin {
			width: calc(100% - var(--module-ts-column-gap) * 2);
			margin-left: var(--module-ts-column-gap);
			margin-right: var(--module-ts-column-gap);
		}
		
		.layout-module {
			height: var(--module-ts-height);
		}
		
		.layout-module-half {
			width: 100%; /* make half width modules full width on ts screens */
		}
		
		.layout-module-row {
			height:  var(--module-ts-height);
			width: 100%;
			flex-direction: column-reverse;
			justify-content: space-between;
		}
		
		.layout-module-row-image {
			height: 50%;
			width: 100%;
		}
		
		.layout-module-row-text {
			padding: 8vw;
			height: 50%;
			width: 100%;
		}
		
		.layout-module-column {
			height: var(--module-ts-height);
		}
		.layout-module-column-text {
			padding: 8vw;
		}
		.layout-module-column-image img {
			object-fit: cover; /* use cover instead of contain on ts screens */
		}
		
		.layout-module-layer {
			width: 100%;
			height: inherit;
		}
		.layout-module .layout-module-layer,
		.layout-module-half .layout-module-layer {
			height: var(--module-ts-height);
		}
		
	}
	
/* @end */
